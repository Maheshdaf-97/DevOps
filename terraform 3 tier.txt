resource "aws_vpc" "tf_vpc" {
  cidr_block = "192.168.0.0/19"
  tags = {
  name = "tf_vpc"
  }
}

resource "aws_internet_gateway" "tf_gw" {
  vpc_id  = aws_vpc.tf_vpc.id
  tags = {
  name = "tf_gw"
  }
}

resource "aws_eip" "eip" {
  vpc = true
  tags = {
  name = "eip"
  }
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.eip.id
  subnet_id = aws_subnet.pub_sub2.id
  tags = {
  name = "nat"
  }
}

resource "aws_subnet" "pub_sub1" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.1.0/24"
  availability_zone = "us-west-1b"
  map_public_ip_on_launch = true

  tags = {
  name = "pub-sub1"
  }
}

resource "aws_subnet" "pub_sub2" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.2.0/24"
  availability_zone = "us-west-1c"
  tags = {
    tags = "pub-sub2"
  }
}

resource "aws_subnet" "private_web1" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.3.0/24"
  availability_zone = "us-west-1b"
  map_public_ip_on_launch = false
  tags = {
    name = "private-web1"
  }
}

resource "aws_subnet" "private_web2" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.4.0/24"
  availability_zone = "us-west-1c"
  map_public_ip_on_launch = false
  tags = {
    name = "private-web2"
  }
}

resource "aws_subnet" "private_app1" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.5.0/24"
  availability_zone = "us-west-1b"
  map_public_ip_on_launch = false
  tags = {
    name = "private-app1"
  }
}

resource "aws_subnet" "private_app2" {
  vpc_id = aws_vpc.tf_vpc.id
  cidr_block = "192.168.6.0/24"
  availability_zone = "us-west-1c"
  map_public_ip_on_launch = false
  tags = {
    name  = "private-app2"
  }
}

resource "aws_route_table" "pub_rt" {
  vpc_id = aws_vpc.tf_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.tf_gw.id
  }
}

resource "aws_route_table_association" "pub_1" {
  subnet_id      = aws_subnet.pub_sub1.id
  route_table_id = aws_route_table.pub_rt.id
}

resource "aws_route_table_association" "pub_2" {
  subnet_id      = aws_subnet.pub_sub2.id
  route_table_id = aws_route_table.pub_rt.id
}

resource "aws_route_table" "web_rt" {
  vpc_id = aws_vpc.tf_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.nat.id
  }
}

resource "aws_route_table_association" "web_1" {
  subnet_id      =  aws_subnet.private_web1.id
  route_table_id = aws_route_table.web_rt.id
}

resource "aws_route_table_association" "web_2" {
  subnet_id      =  aws_subnet.private_web2.id
  route_table_id = aws_route_table.web_rt.id
}

resource "aws_route_table" "app_rt" {
  vpc_id = aws_vpc.tf_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.nat.id
  }
}

resource "aws_route_table_association" "app_1" {
  subnet_id      =  aws_subnet.private_app1.id
  route_table_id = aws_route_table.app_rt.id
}

resource "aws_route_table_association" "app_2" {
  subnet_id      =  aws_subnet.private_app2.id
  route_table_id = aws_route_table.app_rt.id
}

resource "aws_instance" "jump_server" {
  ami               = "ami-0d50e5e845c552faf"
  instance_type     = "t2.micro"
  vpc_security_group_ids = [aws_security_group.tgsg.id]
  key_name          = aws_key_pair.key.key_name
  subnet_id = aws_subnet.pub_sub1.id
  availability_zone = "us-west-1b"
  tags = {
    name = "jump_server"
  }
}

resource "aws_security_group" "tgsg" {
  name        = "3tiersg"
  description = "3tiersg"
  vpc_id =   aws_vpc.tf_vpc.id

  ingress {
    description = "httpd"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "httpd"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "ssh"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "mysql"
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "https"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
}

resource "tls_private_key" "my_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "key" {
  key_name   = "3t_key"
  public_key = tls_private_key.my_key.public_key_openssh
}

resource "local_file" "key" {
  content  = tls_private_key.my_key.private_key_pem
  filename = "3t_key"
}

resource "aws_instance" "nginx_web1" {
  ami               = "ami-0d50e5e845c552faf"
  instance_type     = "t2.micro"
  vpc_security_group_ids = [aws_security_group.tgsg.id]
  key_name          = aws_key_pair.key.key_name
  subnet_id = aws_subnet.private_web1.id
  availability_zone = "us-west-1b"
   user_data = <<-EOF
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get -y install nginx1
              sudo systemctl start nginx
              sudo systemctl enable nginx
              EOF
  tags = {
    name = "nginx_web1"
  }
}

resource "aws_instance" "nginx_web2" {
  ami               = "ami-0d50e5e845c552faf"
  instance_type     = "t2.micro"
  vpc_security_group_ids = [aws_security_group.tgsg.id]
  key_name          = aws_key_pair.key.key_name
  subnet_id = aws_subnet.private_web2.id
  availability_zone = "us-west-1c"
   user_data = <<-EOF
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get -y install nginx1
              sudo systemctl start nginx
              sudo systemctl enable nginx
              EOF
  tags = {
    name = "nginx_web2"
  }
}


resource "aws_s3_bucket" "tierterraformaws" {
  bucket = "tierterraformaws"
}

resource "aws_s3_bucket_acl" "tierterraformaws" {
  bucket = aws_s3_bucket.tierterraformaws.id
  acl = "public-read"
}

resource "aws_s3_object" "object1" {
  bucket = aws_s3_bucket.tierterraformaws.id
  key    = "tomcatdaemon.txt"
  source = "/mnt/d/AWS/3_tier/tomcatdaemon.txt"
  acl    = "public-read"
}

resource "aws_s3_object" "object2" {
  bucket = aws_s3_bucket.tierterraformaws.id
  key    = "mysqlconnector.jar"
  source = "/mnt/d/AWS/RDS/rds2tier/mysqlconnector.jar"
  acl    = "public-read"
}

resource "aws_s3_object" "object3" {
  bucket = aws_s3_bucket.tierterraformaws.id
  key    = "student.war"
  source = "/mnt/d/AWS/RDS/rds2tier/student.war"
  acl    = "public-read"
}

resource "aws_instance" "tomcat_app1" {
  ami               = "ami-0d50e5e845c552faf"
  instance_type     = "t2.micro"
  vpc_security_group_ids = [aws_security_group.tgsg.id]
  key_name          = aws_key_pair.key.key_name
  subnet_id = aws_subnet.private_app1.id
  availability_zone = "us-west-1b"
   user_data = <<-EOF
              #!/bin/bash
              sudo yum install java-openjdk -y
              wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.71/bin/apache-tomcat-9.0.71.tar.gz
              curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/tomcatdaemon.txt
              sudo mv tomcatdaemon.txt /etc/systemd/system/tomcat-daemon.service
              sudo tar -xvzf apache-tomcat-9.0.71.tar.gz 
              sudo mv apache-tomcat-9.0.71 /opt/tomcat
              sudo cd /opt/tomcat/webapps
              sudo curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/student.war
              sudo systemctl daemon-reload
              sudo systemctl start tomcat-daemon
              sudo systemctl enable tomcat-daemon
              sudo curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/mysqlconnector.jar
              sudo mv mysql-connector.jar /opt/tomcat/lib
              sudo mv student.war /opt/tomcat/webapps/
              EOF

   tags = {
   name = "tomcat_app1"
  }
}


resource "aws_instance" "tomcat_app2" {
  ami               = "ami-0d50e5e845c552faf"
  instance_type     = "t2.micro"
  vpc_security_group_ids = [aws_security_group.tgsg.id]
  key_name          = aws_key_pair.key.key_name
  subnet_id = aws_subnet.private_app2.id
  availability_zone = "us-west-1c"
  user_data = <<-EOF
              #!/bin/bash
              sudo yum install java-openjdk -y
              wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.71/bin/apache-tomcat-9.0.71.tar.gz
              curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/tomcatdaemon.txt
              sudo mv tomcatdaemon.txt /etc/systemd/system/tomcat-daemon.service
              sudo tar -xvzf apache-tomcat-9.0.71.tar.gz 
              sudo mv apache-tomcat-9.0.71 /opt/tomcat
              sudo cd /opt/tomcat/webapps
              sudo curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/student.war
              sudo systemctl daemon-reload
              sudo systemctl start tomcat-daemon
              sudo systemctl enable tomcat-daemon
              sudo curl -O https://tierterraformaws.s3.us-west-1.amazonaws.com/mysqlconnector.jar
              sudo mv mysql-connector.jar /opt/tomcat/lib
              sudo mv student.war /opt/tomcat/webapps/
              EOF
              
tags = {
    name = "tomcat_app2"
  }
}

resource "aws_lb" "ng-lb" {
 name =  "ng-lb-1"
 internal = false
 load_balancer_type = "application"
 security_groups = [aws_security_group.tgsg.id]
 enable_deletion_protection = false
 subnets = [
  aws_subnet.pub_sub1.id,
  aws_subnet.pub_sub2.id
 ]
 tags = {
  name = "test"
 }
 }

 resource "aws_lb_target_group" "nginx-tg" {
  name     = "nginx-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.tf_vpc.id
}

resource "aws_lb_listener" "nginx-list" {
  load_balancer_arn = aws_lb.ng-lb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.nginx-tg.arn
  }
}

resource "aws_lb_target_group_attachment" "nginx-lb1" {
  target_group_arn = aws_lb_target_group.nginx-tg.arn
  target_id        = aws_instance.nginx_web1.id
  port             = 80

  depends_on = [
    aws_instance.nginx_web1,
  ]
}

resource "aws_lb_target_group_attachment" "nginx-lb2" {
  target_group_arn = aws_lb_target_group.nginx-tg.arn
  target_id        = aws_instance.nginx_web2.id
  port             = 80

  depends_on = [
    aws_instance.nginx_web2,
  ]
}
  
resource "aws_lb" "tom-lb" {
 name =  "tom-lb-1"
 internal = true
 load_balancer_type = "application"
 security_groups = [aws_security_group.tgsg.id]
 enable_deletion_protection = false
 subnets = [
  aws_subnet.private_app1.id,
  aws_subnet.private_app2.id
 ]
 tags = {
  name = "latest"
 }
 }

 resource "aws_lb_target_group" "tom-tg" {
  name     = "tom-tg"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = aws_vpc.tf_vpc.id
}

resource "aws_lb_listener" "tom-list" {
  load_balancer_arn = aws_lb.tom-lb.arn
  port              = "8080"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tom-tg.arn
  }
}

resource "aws_lb_target_group_attachment" "tomcat-lb1" {
  target_group_arn = aws_lb_target_group.tom-tg.arn
  target_id        = aws_instance.tomcat_app1.id
  port             = 8080

  depends_on = [
   aws_instance.tomcat_app1,
  ]
}

resource "aws_lb_target_group_attachment" "tomcat-lb2" {
  target_group_arn = aws_lb_target_group.tom-tg.arn
  target_id        = aws_instance.tomcat_app2.id
  port             = 8080

  depends_on = [
    aws_instance.tomcat_app2,
  ]
}























# Define the bastion host resource
resource "aws_instance" "bastion_host" {
  ami           = "ami-1234567890"
  instance_type = "t2.micro"
  key_name      = "my_keypair"
  vpc_security_group_ids = ["${aws_security_group.bastion_host_sg.id}"]

  # Configure OpenSSH server
  user_data = <<-EOF
    #!/bin/bash
    sudo yum update -y
    sudo yum install -y openssh-server
    sudo systemctl enable sshd
    sudo systemctl start sshd
  EOF
}

# Define the first private Nginx server resource
resource "aws_instance" "private_nginx_server_1" {
  ami           = "ami-1234567890"
  instance_type = "t2.micro"
  key_name      = "my_keypair"
  vpc_security_group_ids = ["${aws_security_group.private_nginx_server_1_sg.id}"]
  subnet_id     = "${aws_subnet.private.id}"

  # Configure Nginx server
  user_data = <<-EOF
    #!/bin/bash
    sudo yum update -y
    sudo amazon-linux-extras install -y nginx1
    sudo systemctl enable nginx
    sudo systemctl start nginx
  EOF

  # Define the SSH connection to bastion host
  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      host        = "${aws_instance.bastion_host.public_ip}"
      user        = "ec2-user"
      private_key = "${file("~/.ssh/mykeypair.pem")}"
    }

    # Execute SSH command on bastion host to connect to private Nginx server 1
    inline = [
      "ssh ec2-user@${aws_instance.private_nginx_server_1.private_ip} -o ProxyCommand='ssh -W %h:%p ec2-user@${aws_instance.bastion_host.public_ip}'"
    ]
  }
}

# Define the second private Nginx server resource
resource "aws_instance" "private_nginx_server_2" {
  ami           = "ami-1234567890"
  instance_type = "t2.micro"
  key_name      = "my_keypair"
  vpc_security_group_ids = ["${aws_security_group.private_nginx_server_2_sg.id}"]
  subnet_id     = "${aws_subnet.private.id}"

  # Configure Nginx server
  user_data = <<-EOF
    #!/bin/bash
    sudo yum update -y
    sudo amazon-linux-extras install -y nginx1
    sudo systemctl enable nginx
    sudo systemctl start nginx
  EOF

  














